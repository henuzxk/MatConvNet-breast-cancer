function [net, opts] = defnetx

[opts] = defopts();

lr = [0.1, 2.0];
W  = [ 7,  5,  5];
WK = [64, 64,  1];
WS = [ 2,  1,  1];
P  = [ 5,  5,  6;
       5,  5,  7];
PS = [ 2,  2,  2];
[net]  = defnetr(lr,W,WK,WS,P,PS);
% Upper Layers (no change)
net.layers{end+1} = struct('type', 'sigmoid');
net.layers{end+1} = struct('type', 'loss');

% -------------------------------------------------------------------------
function [net] = defnetr(lr,W,WK,WS,P,PS)
% -------------------------------------------------------------------------
net.layers = {};
% Block 1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', ...
                           {{0.05*randn(W(1),W(1),3,WK(1), 'single'), ...
                                            zeros(1,WK(1), 'single')}},...
                           'learningrate', lr,...
                           'stride', WS(1),...
                           'pad', floor(W(1)/2));
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max',...
                           'pool', P(:,1),...
                           'stride', PS(2),...
                           'pad', [0 1 0 1]);

% Block 2
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', ...
                           {{0.01*randn(W(2),W(2),WK(1),WK(2), 'single'), ...
                                                zeros(1,WK(2), 'single')}},...
                           'learningrate', lr,...
                           'stride', WS(2),...
                           'pad', floor(W(2)/2)-2);
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max',...
                           'pool', P(:,2),...
                           'stride', PS(2),...
                           'pad', [0 1 0 1]);
% Dropout
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.5);

% Block 3
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', ...
                           {{0.001*randn(W(3),W(3),WK(2),WK(3), 'single'), ...
                                                 zeros(1,WK(3), 'single')}}, ...
                           'learningrate', 0.1*lr, ...
                           'stride', WS(3), ...
                           'pad', floor(W(3)/2));
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'avg',...
                           'pool', P(:,3),...
                           'stride', PS(3),...
                           'pad', [0 1 0 1]);

% -------------------------------------------------------------------------
function [opts] = defopts()
% -------------------------------------------------------------------------
opts.numepochs          = 1000;
opts.learningrate       = 0.005;
opts.weightdecay        = 0.0005;
opts.momentum           = 0.90;
opts.threshold          = 0.5;
opts.errorfunction      = @errorfun;
opts.getbatch           = @getbatch;

opts.conservememory     = false;
opts.backpropdepth      = +inf;
opts.sync               = false;
opts.cudnn              = false;

opts.datadir            = fullfile('data');









